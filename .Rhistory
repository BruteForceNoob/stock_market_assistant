install.packages('quantmod')
require(quantmod)
getSymbols("IBM")
IBM
chartSeries(IBM)
getSymbols("HDFCBANK.BO", src="yahoo")
HDFCBANK.BO
install.packages("shiny")
library(shiny)
runExample("01_hello")
stocks <- read.table("~/stocks.RData", quote="\"")
View(stocks)
View(stocks)
require(quantmod)
getSymbols("AXISBANK.BO","BHEL.BO","BHARTIARTL.BO","CIPLA.BO","HEROMOTOCO.BO","HINDALCO.BO","INFY.BO","ITC.BO","RELIANCE.BO","WIPRO.BO",src="yahoo")
getSymbols(c("AXISBANK.BO","BHEL.BO","BHARTIARTL.BO","CIPLA.BO","HEROMOTOCO.BO","HINDALCO.BO","INFY.BO","ITC.BO","RELIANCE.BO","WIPRO.BO"),src="yahoo")
require(PerformanceAnalytics)
char.BarVar(IBM)
chart.BarVar(IBM)
chart.BarVaR(IBM)
chart.BarVaR(IBM[,6])
charts.PerformanceSummary(ITC.BO["2010"],INFY.BO["2010"])
charts.PerformanceSummary(ITC.BO["2009"],INFY.BO["2009"])
R.IBM = Return.calculate(xts(prices), method="discrete")
colnames(R.IBM)="IBM"
chart.CumReturns(R.IBM,legend.loc="topleft", main="Cumulative Daily Returns for IBM")
round(R.IBM,2)
Return.calculate(IBM[,6],method="discrete")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
c<-Return.calculate(IBM[,6],method="discrete")
SharpeRatio(c, Rf=.035/12, FUN="StdDev")
typeof(SharpeRatio(c, Rf=.035/12, FUN="StdDev"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
SortinoRatio(c)
round(SortinoRatio(c))
round(SortinoRatio(c),4)
shiny::runApp()
shiny::runApp()
a
??a
??a shiny
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
save.image("~/mock.RData")
library(tm)
library(tm.plugin.webmining)
yahoonews<-WebCorpus(YahooNewsSource("Microsoft"))
class(yahoonews)
yahoonews
yahoofinance <- WebCorpus(YahooFinanceSource("MSFT"))
getQuotes("HINDALCO.BO",src="yahoo")
getQuote("HINDALCO.BO",src="yahoo")
yahoofinance
encloseHTML(yahoofinance)
class(yahoofinance)
encloseHTML(WebCorpus(yahoofinance)
)
encloseHTML(yahoofinance)
extract(yahoofinance)
corpus <- Corpus(YahooNewsSource("Microsoft"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
getQuote("HALC.BO",src="yahoo")
getQuote("HALC.BO")
??tags$script
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
save.image("~/stocks.RData")
save.image("~/mock.RData")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(BHARTIARTL.BO)
getQuote("IBM")
View(BHARTIARTL.BO)
shiny::runApp()
View(AXISBANK.BO)
View(AXISBANK.BO)
shiny::runApp()
getQuote("IBM")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
axis(2, at=x,labels=x, col.axis="red", las=2)
x <- c(1:10)
axis(2, at=x,labels=x, col.axis="red", las=2)
shiny::runApp()
getSymbols(c("AXISBANK.BO","BHEL.BO","BHARTIARTL.BO","CIPLA.BO","HEROMOTOCO.BO","HINDALCO.BO","INFY.BO","ITC.BO","RELIANCE.BO","WIPRO.BO"))
View(WIPRO.BO)
View(WIPRO.BO)
getSymbols("AXISBANK.BO")
getSymbols('AXISBANK.BO')
getSymbols('WIPRO.BO')
View(WIPRO.BO)
View(WIPRO.BO)
getSymbols('HINDALCO.BO')
getSymbols('RELIANCE.BO')
getSymbols('INFY.BO')
getSymbols('ITC.BO')
getSymbols('HEROMOTOCO.BO')
getSymbols('CIPLA.BO')
getSymbols('BHARTIARTL.BO')
getSymbols('BHEL.BO')
shiny::runApp()
getQuote("IBM")
library(twitteR)
install.packages('twitteR')
install.packages('ROAuth')
install.packages('RCurl')
install.packages("RCurl")
install.packages("RCurl")
library(twitteR)
library(ROAuth)
library(RCurl)
install.packages("RCurl")
install.packages("RCurl")
download.file(url="http://curl.haxx.se/ca/cacert.pem",destfile="cacert.pem")
download.file(url="http://curl.haxx.se/ca/cacert.pem",destfile="cacert.pem")
install.packages("RCurl")
l
library(RCurl)
download.file(url="http://curl.haxx.se/ca/cacert.pem",destfile="cacert.pem")
download.file(url="http://curl.haxx.se/ca/cacert.pem",destfile="cacert.pem")
download.file(url="http://curl.haxx.se/ca/cacert.pem",destfile="cacert.pem")
download.file(url="http://curl.haxx.se/ca/cacert.pem",destfile="cacert.pem")
download.file(url="http://curl.haxx.se/ca/cacert.pem",
destfile="cacert.pem")
download.file(url="http://curl.haxx.se/ca/cacert.pem",
destfile="cacert.pem")
download.file(url="https://raw.githubusercontent.com/bagder/ca-bundle/master/ca-bundle.crt",
destfile="cacert.pem")
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <-"FlGZZENrmNgCXehkHaFNAn48z"
consumerSecret <-"hnsUaIyqXTwuaUK58exHHnkYYG0ECScbCe7DRP4rkbE8ym1BtE"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=requestURL,
accessURL=accessURL,
authURL=authURL)
require("ROAuth")
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=requestURL,
accessURL=accessURL,
authURL=authURL)
require("twitteR")
require("RCurl")
download.file(url="http://curl.haxx.se/ca/cacert.pem",
destfile="cacert.pem")
twitCred$handshake(cainfo="cacert.pem")
download.file(url="https://raw.githubusercontent.com/bagder/ca-bundle/master/ca-bundle.crt",
destfile="cacert.pem")
twitCred$handshake(cainfo="cacert.pem")
twitCred$handshake(cainfo="cacert.pem.bz2.meta4")
twitCred$handshake(cainfo="cacert.pem")
download.file(url="http://curl.haxx.se/ca/cacert.pem",
destfile="cacert.pem")
download.file(url="http://daniel.haxx.se/ca/cacert.pem",
destfile="cacert.pem")
twitCred$handshake(cainfo="cacert.pem")
download.file(url="http://curl.haxx.se/ca/cacert.pem",
destfile="cacert.pem")
download.file(url="ftp://ftp.uhulinux.hu/mirror/http:/curl.haxx.se/ca/cacert.pem",
destfile="cacert.pem")
download.file(url="ftp://ftp.uhulinux.hu/mirror/http:/curl.haxx.se/ca/cacert.pem",
destfile="cacert.pem")
download.file(url="http://cool.haxx.se/ca/cacert.pem",
destfile="cacert.pem")
twitCred$handshake(cainfo="root.crt")
twitCred$handshake(cainfo="root.pem")
twitCred$handshake(cainfo="class3.crt")
bunzip2 cacert.pem.bz2
download.file(url="http://cool.haxx.se/ca/cacert.pem",
destfile="cacert.pem")
download.file(url="http://curl.haxx.se/ca/cacert.pem",
destfile="cacert.pem")
require('RJSONIO')
require('doBy')
install.packages('doBy')
twitCred$handshake()
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=requestURL,
accessURL=accessURL,
authURL=authURL)
library(RCurl)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
download.file(url="curl http://curl.haxx.se/ca/cacert.pem",
destfile="cacert.pem")
download.file(url=" http://curl.haxx.se/ca/cacert.pem",
destfile="cacert.pem")
download.file(url="http://curl.haxx.se/ca/cacert.pem",
destfile="cacert.pem")
system( paste0( "curl http://curl.haxx.se/ca/cacert.pem -o " , tempdir() , "/cacert.pem" ) )
twitCred$handshake( cainfo = paste0( tempdir() , "/cacert.pem" ) )
twitCred$handshake(cainfo="cacert.pem")
twitCred$handshake( cainfo = paste0( tempdir() , "/cacert.pem" ) )
library(RCurl)
options(RCurlOptions = list(cainfo = system.file(“CurlSSL”, “cacert.pem”, package = “Rcurl”)))
file.edit('~/.Rprofile')
library(devtools)
access_token<-"3167997362-5uJBHC4cPyoz76LktDxcsQR6xj2XU5cJ2HJrRoI"
access_token_s<-"dwAxF4bTjY8EIKqKqbwayVKAF0DdocXdDq7AUg3E8nfgu"
setup_twitter_oauth(consumerKey,consumerSecret,access_token,access_token_s)
searchTwitter("iphone")
tweets = searchTwitter("#apple")
Tweets.text = laply(tweets,function(t)t$getText())
library(plyr)
install.packages(plyr)
install.packages(plyr)
Install.packages(plyr)
Install.packages('plyr')
install.packages('plyr')
library(plyr)
Tweets.text = laply(tweets,function(t)t$getText())
pos = scan('/Desktop/positive_words.txt', what='character', comment.char=';')
pos = scan('C:\Users\sujeeth\Desktop\positive_words.txt', what='character', comment.char=';')
pos = scan('C:\users\sujeeth\Desktop\positive_words.txt', what='character', comment.char=';')
pos = scan('\Users\sujeeth\Desktop\positive_words.txt', what='character', comment.char=';')
pos = scan('/Users/sujeeth/Desktop/positive_words.txt', what='character', comment.char=';')
pos = scan('/Users/sujeeth/Desktop/negative_words.txt', what='character', comment.char=';')
score.sentiment = function(sentences, pos.words, neg.words, .progress='none')
{
require(plyr)
require(stringr)
# we got a vector of sentences. plyr will handle a list
# or a vector as an "l" for us
# we want a simple array ("a") of scores back, so we use
# "l" + "a" + "ply" = "laply":
scores = laply(sentences, function(sentence, pos.words, neg.words) {
# clean up sentences with R's regex-driven global substitute, gsub():
sentence = gsub('[[:punct:]]', '', sentence)
sentence = gsub('[[:cntrl:]]', '', sentence)
sentence = gsub('\d+', '', sentence)
# and convert to lower case:
sentence = tolower(sentence)
# split into words. str_split is in the stringr package
word.list = str_split(sentence, '\s+')
# sometimes a list() is one level of hierarchy too much
words = unlist(word.list)
# compare our words to the dictionaries of positive & negative terms
pos.matches = match(words, pos.words)
neg.matches = match(words, neg.words)
# match() returns the position of the matched term or NA
# we just want a TRUE/FALSE:
pos.matches = !is.na(pos.matches)
neg.matches = !is.na(neg.matches)
# and conveniently enough, TRUE/FALSE will be treated as 1/0 by sum():
score = sum(pos.matches) - sum(neg.matches)
return(score)
}, pos.words, neg.words, .progress=.progress )
scores.df = data.frame(score=scores, text=sentences)
return(scores.df)
}
score.sentiment = function(sentences, pos.words, neg.words, .progress='none')
{
require(plyr)
require(stringr)
# we got a vector of sentences. plyr will handle a list
# or a vector as an "l" for us
# we want a simple array ("a") of scores back, so we use
# "l" + "a" + "ply" = "laply":
scores = laply(sentences, function(sentence, pos.words, neg.words) {
# clean up sentences with R's regex-driven global substitute, gsub():
sentence = gsub('[[:punct:]]', '', sentence)
sentence = gsub('[[:cntrl:]]', '', sentence)
sentence = gsub('\d+', '', sentence)
# and convert to lower case:
sentence = tolower(sentence)
# split into words. str_split is in the stringr package
word.list = str_split(sentence, '\s+')
# sometimes a list() is one level of hierarchy too much
words = unlist(word.list)
# compare our words to the dictionaries of positive & negative terms
pos.matches = match(words, pos.words)
neg.matches = match(words, neg.words)
# match() returns the position of the matched term or NA
# we just want a TRUE/FALSE:
pos.matches = !is.na(pos.matches)
neg.matches = !is.na(neg.matches)
# and conveniently enough, TRUE/FALSE will be treated as 1/0 by sum():
score = sum(pos.matches) - sum(neg.matches)
return(score)
}, pos.words, neg.words, .progress=.progress )
scores.df = data.frame(score=scores, text=sentences)
return(scores.df)
}
}
hist(analysis$score)
hist(analysis$score)
analysis = score.sentiment(Tweets.text, pos, neg)
hist(analysis$score)
hist(analysis$score)
table(analysis$score)
require(stringr)
analysis <- score.sentiment(Tweets.text, pos, neg)
}
analysis = score.sentiment(Tweets.text, pos, neg)
}analysis = score.sentiment(Tweets.text, pos, neg)
table(analysis$score)
table(analysis$score)
score = sum(pos.matches) - sum(neg.matches)
neg.matches <- !is.na(neg.matches)
# and conveniently enough, TRUE/FALSE will be treated as 1/0 by sum():
score = sum(pos.matches) - sum(neg.matches)
}
score.sentiment = function(sentences, pos.words, neg.words, .progress='none')
{
require(plyr)
require(stringr)
# we got a vector of sentences. plyr will handle a list
# or a vector as an "l" for us
# we want a simple array ("a") of scores back, so we use
# "l" + "a" + "ply" = "laply":
scores = laply(sentences, function(sentence, pos.words, neg.words) {
# clean up sentences with R's regex-driven global substitute, gsub():
sentence = gsub('[[:punct:]]', '', sentence)
sentence = gsub('[[:cntrl:]]', '', sentence)
sentence = gsub('\d+', '', sentence)
# and convert to lower case:
sentence = tolower(sentence)
# split into words. str_split is in the stringr package
word.list = str_split(sentence, '\s+')
# sometimes a list() is one level of hierarchy too much
words = unlist(word.list)
# compare our words to the dictionaries of positive & negative terms
pos.matches = match(words, pos.words)
neg.matches = match(words, neg.words)
# match() returns the position of the matched term or NA
# we just want a TRUE/FALSE:
pos.matches = !is.na(pos.matches)
neg.matches = !is.na(neg.matches)
# and conveniently enough, TRUE/FALSE will be treated as 1/0 by sum():
score = sum(pos.matches) - sum(neg.matches)
return(score)
}, pos.words, neg.words, .progress=.progress )
scores.df = data.frame(score=scores, text=sentences)
return(scores.df)
}
analysis = score.sentiment(Tweets.text, pos, neg)
score.sentiment <- function(sentences, pos.words, neg.words, .progress='none')
{
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
, pos.words, neg.words, .progress=.progress )
shiny::runApp()
View(AXISBANK.BO)
View(AXISBANK.BO)
View(AXISBANK.BO)
View(AXISBANK.BO)
View(BHEL.BO)
View(BHEL.BO)
View(WIPRO.BO)
View(WIPRO.BO)
View(WIPRO.BO)
require(twitteR)
tweetsearch("apple")
View(AXISBANK.BO)
searchTwitter("#apple")
require('Rauth')
View(WIPRO.BO)
shiny::runApp()
View(WIPRO.BO)
View(BHEL.BO)
library(twitteR)
library(plyr)
setup_twitter_oauth(consumerKey,consumerSecret,access_token,access_token_s)
searchTwitter("iphone")
searchTwitter("#apple")
searchTwitter("#wipro")
searchTwitter("@wipro")
shiny::runApp()
searchTwitter("@infy")
searchTwitter("@wipro")
getQuote('IBM')
getSymbol('IBM')
getSymbols('IBM')
View(HDFCBANK.BO)
View(HDFCBANK.BO)
getSymbols('IBM')
getQuote('IBM')
shiny::runApp()
shiny::runApp()
getQuote("IBM")
shiny::runApp()
getQuote('MTNL')
getQuote("IBM")
require(quantmod)
getQuote('MTNL')
shiny::runApp()
shiny::runApp()
getQuote("AAPL");
shiny::runApp()
getQuote("AAPL");
shiny::runApp()
shiny::runApp()
shiny::runApp()
getQuote("AAPL");
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("Rjava")
y
yes
install.packages("rJava")
shiny::runApp()
shiny::runApp()
